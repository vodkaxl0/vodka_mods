# -----------------------Immports---------------
from .. import loader, utils
from ..inline.types import InlineCall

from typing import Union, Optional
import re
import asyncio
from asyncio.exceptions import TimeoutError
from datetime import datetime, timedelta
import logging
import json as Json
from random import choice
import pytz

from telethon.tl.types import (
    Message,
    User,
    MessageEntityPhone,
    MessageEntityMentionName,
    MessageEntityTextUrl,
    MessageEntityMention,
    Channel,
)

from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsSearch

MEP = MessageEntityPhone
MEMN = MessageEntityMentionName
METU = MessageEntityTextUrl
MENT = MessageEntityMention
logger = logging.getLogger('BioWars Tools')
re._MAXCA–°HE = 3000

# ---------------------------Module--------------------


@loader.tds
class BioWars(loader.Module):
    """–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ \n–ë—É–¥—É—â–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç —é–± –õ–∞–ø–∏–∫–∞ –∏ –ö–Ω–æ–ø–∫–∏"""

    strings = {
        "name": "BioWars Tools",
        "link_id": "tg://openmessage?user_id=",
        "link_username": "https://t.me/",

        "—Åommands": {
            "z": "[args] [reply] ",
            "id": "[arg/reply] -",
            "ids": "[args] [reply] - –ß–µ–∫–∞–µ—Ç –∞–π–¥–∏ –ø–æ —Ä–µ–ø–ª–∞—é",
            "dov": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–æ–≤–µ—Ä–∫–µ",
            'zz': '–ê–Ω–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥—ã .–± –∏–∑ –±–∏–æ',
            'nik': '[id] [–∏–º—è] - –∑–∞–ø–∏—Å—å —á–µ–ª–æ–≤–µ–∫–∞',
            'pref': '[id] [–ø—Ä–µ—Ñ–∏–∫—Å] - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –¥–æ–≤–∞'
        },
        # –ó–∞—Ä–ª–∏—Å—Ç
        'zar.search':
            "üîç –ñ–µ—Ä—Ç–≤–∞ {} –ø—Ä–∏–Ω–æ—Å–∏—Ç:\n"
            "‚ò£Ô∏è <b>+{} –±–∏–æ-–æ–ø—ã—Ç–∞</b>\n"
            "üìÜ <b>–î–∞—Ç–∞:</b> <i>{}</i> \n"
            'üìÖ <b>–ó–∞—Ä–∞–∂–µ–Ω–∏–µ –¥–æ:</b> {} ',

        'zar.save':
            "ü¶†–Ø –∑–∞–ø–∏—Å–∞–ª <b><code>{}</code></b> —Ö–æ–∑—è–∏–Ω.\n"
            "<b>‚ò£Ô∏è<s>{}</s> +{} –±–∏–æ-–æ–ø—ã—Ç–∞.</b>  \n"
            "üìÖ <b>–ó–∞—Ä–∞–∂–µ–Ω–∏–µ –¥–æ:</b> {} ",

        'z.nf': 'üîç –ñ–µ—Ä—Ç–≤–∞ <code>{}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ.',

        'edit_nik': '<b>–Æ–∑–µ—Ä <code>@{0}</code> —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫</b> <a href = "tg://openmessage?user_id={0}">{1}</a>',
        'edit_pref': '<b>–ü—Ä–µ—Ñ–∏–∫—Å <code>{}</code> —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è <code>@{}</code></b>',
        # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –º–æ–¥—É–ª—é
        "bio.commands": "<b>üöÄ –í–æ—É, —Ç—ã –Ω–∞–≤–µ—Ä–Ω–æ–µ —É–¥–∏–≤–∏–ª—Å—è —É–≤–∏–¥–µ–≤ —á—Ç–æ –∫–æ–º–∞–Ω–¥ –≤    –º–æ–¥—É–ª–µ –Ω–µ—Ç, –Ω–æ –∫ —Ç–≤–æ–µ–º—É —Å—á–∞—Å—Ç—å—é –æ–Ω–∏ –≤—Å–µ-–∂–µ –µ—Å—Ç—å. üßô–ú–∞–≥–∏—è –∫–∞–∫–∞—è-—Ç–æ...   \n\n"
        "üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b> \n"
        "{1} \n"
        "<b>üòâ –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–æ  –µ—â–µ –Ω–µ –≤—Å–µ, –Ω–∏–∂–µ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ  —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –º–æ–¥—É–ª—é. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b> \n"
        "<code>{0}biotools –∏–Ω—Ñ–æ</code> - <b>–Ω–µ–±–æ–ª—å—à–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å</b> \n"
        "<code>{0}biotools –∑–∞—Ä–ª–∏—Å—Ç</code> - <b>–ø–æ–º–æ—â—å –ø–æ –∑–∞—Ä–ª–∏—Å—Ç—É</b> \n"
        "<code>{0}biotools –¥–æ–≤–µ—Ä–∫–∞</code> - <b>–ø–æ–º–æ—â—å –ø–æ –¥–æ–≤–µ—Ä–∫–µ</b>",
        'bio.info':
            'üìä <b>–ù–µ–±–æ–ª—å—à–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> \n\n'
            '‚ò¢Ô∏è <b>–ñ–µ—Ä—Ç–≤ –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ:</b> <code>{}</code> \n'
            '‚ò¢Ô∏è <b>–°—É–º–º–∞—Ä–Ω—ã–π –æ–ø—ã—Ç —Å –∂–µ—Ä—Ç–≤:</b> {} \n'
            'üîç<b>–ò–∑–≤–µ—Å—Ç–Ω—ã—Ö:</b> <code>{}</code> \n'
            'üî∞ <b>–î–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{}</code>',

        "bio.zar": "",
        "bio.dov": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–≤–µ—Ä–∫–∏",
        'bio.dov.levels':
            '<b>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω—è—Ö –¥–æ–≤–µ—Ä–∫–∏: \n'
            '–°—É—â–µ—Å—Ç–≤—É–µ—Ç 4 —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∫–∏ \n\n'
            'üìó 1 —É—Ä–æ–≤–µ–Ω—å: \n'
            '   üîí <i>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</i>: –î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–∞–∂–µ–Ω–∏—è–º | –í–∞–∫—Ü–∏–Ω–∞ | –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä | –ö—Ä–∞—Ç–∫–∞—è –ª–∞–±–∞ | –ü—Ä–æ—Å–º–æ—Ç—Ä –∂–µ—Ä—Ç–≤ –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ \n'
            'üìí 2 —É—Ä–æ–≤–µ–Ω—å: \n'
            '   üîè <i>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</i>: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–ª–∏—Å—Ç–æ–º | –ü—Ä–æ—Å–º–æ—Ç—Ä –∂–µ—Ä—Ç–≤ \n'
            'üìô 3 —É—Ä–æ–≤–µ–Ω—å: \n'
            '   üîê <i>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</i>:  –ü—Ä–æ—Å–º–æ—Ç—Ä –±–æ–ª–µ–∑–Ω–µ–π | –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—à–∫–∞ | –ß–µ–∫ –Ω–∞–≤—ã–∫–æ–≤ \n'
            'üìï 4 —É—Ä–æ–≤–µ–Ω—å: \n'
            '   üîì <i>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</i>: –§—É–ª–ª –ª–∞–±–∞ | –°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –ø–∞—Ç–æ–≥–µ–Ω–∞(–ª–∞–±—ã) | –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∏—Ç—å +–≤–∏—Ä—É—Å—ã | –ü—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ \n\n'
            'üß∑ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: \n'
            '–í—Å–µ–º –æ–≤–Ω–µ—Ä–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏—Ç—Å—è 4 —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∫–∏ \n'
            '–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —ç—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å</b>',
        # –í—Å–µ —á—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–æ–≤–µ—Ä–∫–µ
        "dov": "<b>‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–æ–≤–µ—Ä–∫–µ</b> \n"
        "üïπ <code>{0}dov dovs</code> - —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π \n"
        "üïπ <code>{0}dov prefs</code> - —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π \n\n"
        '   üïπ <code>{0}dov set</code> [–∞–π–¥–∏/—Ä–µ–ø–ª–∞–π] - –î–æ–±–∞–≤–∏—Ç—å|–£–¥–∞–ª–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞ \n'
        "   üïπ <code>{0}dov set</code> [–∞–π–¥–∏/—Ä–µ–ø–ª–∞–π] |—É—Ä–æ–≤–µ–Ω—å| -- –î–æ–±–∞–≤–∏—Ç—å| –ü–æ–≤—ã—Å–∏—Ç—å/–ü–æ–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∫–∏ —Å–∞–ø–æ—Ä—Ç–∞\n\n"

        "üïπ <code>{0}dov nik</code> [–Ω–∏–∫] -- <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫</b> \n"
        "   üî± –í–∞—à –Ω–∏–∫: <code>{1}</code> \n\n"
        "üïπ <code>{0}dov st</code> -- <b>–í–∫–ª—é—á–µ–Ω–∏–µ/–í—ã–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∫–∏</b> \n"
        "   {2} –°—Ç–∞—Ç—É—Å –¥–æ–≤–µ—Ä–∫–∏: <b>{3}</b> \n\n"
        "<b>üóÉ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –¥–æ–≤–µ—Ä–∫–µ –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π:</b> \n"
        "<code>{0}biotools –¥–æ–≤–µ—Ä–∫–∞</code> \n"
        "<b>üóÉ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Ä–æ–≤–Ω—è—Ö –¥–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π:</b> \n"
        "<code>{0}biotools –¥–æ–≤–µ—Ä–∫–∞ -—É—Ä–æ–≤–Ω–∏</code>",

        'dov.users': 'üöÄ <b>–°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> \n' \
        '{}',
        "dov.users.chat": 'üî∞ –°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ: \n' \
        '{}',
        "dov.prefs": 'üöÄ <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–æ–≤–µ—Ä–æ–∫:</b> \n'
        '{}',
        "dov.prefs.chat": 'üî∞ –°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ: \n' \
        '{}',

        # –ö–æ–º–∞–Ω–¥—ã –¥–æ–≤–µ—Ä–∫–∏
        "dov.rem": "‚ö†Ô∏è @{} <b>—É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</b>",
        "dov.add":
            "üî∞ @{} <b>–¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! \n"
            "üîê <b>–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∫–∏:</b> {}",
        'dov.edit_level':
            'üöÄ –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∫–∏ —É <code>@{}</code>! \n'
            'üî∞ <b> <s>{}</s> ‚á® {}</b>',
        "nick.rename": "‚ÑπÔ∏è –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∏–∫! \n" \
        "üî∞ <s>{0}</s> ‚á® <b>{1}</b>",
        "dov.status.True": "‚úÖ <b>–î–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>",
        "dov.status.False": "‚ùé <b>–î–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>",
        # –û—à–∏–±–∫–∏
        "no.reply": "üôÑ –û—Ç—Å—É—Å—Ç–≤—É–µ—Ç —Ä–µ–ø–ª–∞–π",
        "no.args": "üôÑ –û—Ç—Å—É—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã",
        "no.args_and_reply": "üôÑ –û—Ç—Å—É—Å—Ç–≤—É–µ—Ç —Ä–µ–ø–ª–∞–π –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã",
        "args_error": 'üôÑ –ê—Ä–≥—É–º–µ–Ω—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ',
        "len_error": "üìò <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤. –õ–∏–º–∏—Ç 8 —Å–∏–º–≤–æ–ª–æ–≤</b>",
        "hueta": "üò∂ –¢–µ–±–µ –Ω–µ –∫–∞–∂–µ—Ç—Å—è —á—Ç–æ —Ç—É—Ç —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫?",
        # –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞
        "messages.biotop": [
            'üôÑ –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–æ—Ç–æ–ø',
            'üëΩ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –±–∏–æ—Ç–æ–ø',
            'ü§ß –°–∫—É—á–Ω—ã–π –±–∏–æ—Ç–æ–ø'
        ],
        'messages.misc': [
            "ü§î –ß—Ç–æ –∂–µ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?",
            "üò∞ –ö—É–¥–∞ –∫–∞—Ç–∏—Ç—Å—è –º–∏—Ä...",
            "ü•∂ –í–∏–¥–∏–º–æ —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç —Ñ–∞—Ä–º",
            "ü´° –í–ø–µ—Ä–µ–¥ –ø–æ –Ω–æ–≤–æ–π",
        ],
        "get_user": "üöÄ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \n"
        "<b>ü•∑üèª</b> <a href='tg://openmessage?user_id={}'>{}</a> \n"
        "<b>üìÉ–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{} \n"
        "<b>üÜî–ê–π–¥–∏:</b> <code>@{}</code>",
        'calc_formul': {
            'zar': 2.5,
            'imun': 2.45,
            'sb': 2.1,
            'kvala': 2.6,
            'pat': 2,
            'letal': 1.95
        }


    }
# -----------------------Functions-------------------

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏",
                False,
                "–°—Ç–∞—Ç—É—Å –¥–æ–≤–µ—Ä–∫–∏",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∂–µ—Ä—Ç–≤",
                False,
                "–ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∂–µ—Ä—Ç–≤(–ë–ï–¢–ê) \n–ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ",
                validator=loader.validators.Boolean(),
            ),
        )

    async def client_ready(self, client, db):
        # Nummod + BioWars
        self.client = client
        self.db = db

        # NumMod
        if not self.db.get("NumMod", "numfilter"):
            # –î–æ–±–æ–≤–ª–µ–Ω–∏–µ –æ–≤–Ω–µ—Ä–æ–≤ —é–± –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–≤—à–∏—Ö—Å—è –ª—é–¥–µ–π
            # –ê–π–¥–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–∞–º —Ç–æ–∂–µ –ø—Ä–∏—Å—É—Å—Ç–≤—É–µ
            owners = list(getattr(self.client.dispatcher.security, "owner"))

            # –£ –æ–≤–Ω–µ—Ä–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç 4 —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∫–∏
            # 1) –ó–∞—Ä–∞–∂–µ–Ω–∏—è\–≤–∞–∫—Ü–∏–Ω–∞\–∑–∞—Ä–ª–∏—Å—Ç\–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\–∫—Ä–∞—Ç–∫–∞—è –ª–∞–±–∞\inline .–±
            # 2) –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∂–µ—Ä—Ç–≤ –≤ –∑–∞—Ä–ª–∏—Å—Ç\—á–µ–∫ –∂–µ—Ä—Ç–≤
            # 3)–ß–µ–∫ –±–æ–ª–µ–∑–Ω–µ–π\—á–µ–∫ –º–µ—à–∫–∞\—á–µ–∫ –Ω–∞–≤—ã–∫–æ–≤ —á–µ—Ä–µ–∑ –≤–∏—Ä –ª–∞–± {–Ω–∞–≤—ã–∫}
            # 4) –§—É–ª–ª –ª–∞–±–∞\—Å–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –ø–∞—Ç–æ–≥–µ–Ω–∞(–ª–∞–±—ã)\–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∏—Ç—å   +–≤–∏—Ä—É—Å—ã\–ø—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤
            self.db.set(
                "NumMod",
                "numfilter",
                {"users": owners, "filter": None, "status": False},
            )
        # infList
        if not self.db.get("NumMod", "infList"):
            self.db.set("NumMod", "infList", {})

        if not self.db.get("BioWars", "DovUsers"):
            owners = list(getattr(self.client.dispatcher.security, "owner"))
            users = {}
            for i in self.db.get("NumMod", "numfilter")["users"]:
                users[str(i)] = 1
            for i in owners:
                users[str(i)] = 4
            self.db.set("BioWars", "DovUsers", users)

        if not self.db.get('BioWars', 'FamousUsers'):
            self.db.set('BioWars', 'FamousUsers', {})
            # {id : username }
        if not self.db.get('BioWars', 'LastInfect'):
            self.db.set('BioWars', 'LastInfect', None)

        if not self.db.get('BioWars', 'InfectionBefore'):
            self.db.set('BioWars', 'InfectionBefore', {})

        if not self.db.get('BioWars', 'YourLetal'):
            self.db.get('BioWars', 'YourLetal', 1)
            # –í–∞—à –ª–µ—Ç–∞–ª, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∂–µ—Ä—Ç–≤ –≤ –∑–∞—Ä–ª–∏—Å—Ç
        if not self.db.get('BioWars', 'UsersNik'):
            self.db.set('BioWars', 'UsersNik', {})
            # user_id : –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫
        if not self.db.get('BioWars', 'FamousPrefs'):
            self.db.set('BioWars', 'FamousPrefs', {})
            # user_id : pref
        # –ü—Ä–∏ –∑–∞—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞–≤–∏—Ç—Å—è True
        # –°—Ç–∞—Ç—É—Å –∑–∞—Ä–∞–∂–µ–Ω–∏—è
        self.db.set("BioWars", "infStatus", False)
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞—Ä–∞–∂–µ–Ω–∏—è–º–∏
        self.db.set("BioWars", "infInterval", 4)

    async def send(self, text: str, message: Message) -> None:
        """–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π,   —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º"""
        # from telethon.errors.rpcerrorlist import BotResponseTimeoutError
        try:
            await self.inline.form(
                text,
                reply_markup={
                    "text": "üîª –ó–∞–∫—Ä—ã—Ç—å",
                    "callback": self.inline__close,
                },
                message=message,
                disable_security=False,
            )
        except:
            await utils.answer(message, text)

    async def inline__close(self, call) -> None:
        await call.delete()

    async def return_user(self, username: str) -> int:
        if username not in self.db.get('BioWars', 'FamousUsers').values():
            await self._write_user(username=username)

        famous_users = self.db.get('BioWars', 'FamousUsers')
        for k, v in famous_users.items():
            if v == username:
                user_id = k
                return user_id

    async def save_nik(self, user_id: int, nik: str) -> None:
        users_nik = self.db.get('BioWars', 'UsersNik')
        users_nik[str(user_id)] = nik
        self.db.set('BioWars', 'UsersNik', users_nik)

    async def save_pref(self, user_id: int, nik: str) -> None:
        users_nik = self.db.get('BioWars', 'FamousPrefs')
        users_nik[str(user_id)] = nik
        self.db.set('BioWars', 'FamousPrefs', users_nik)

    async def _write_user(self, username: Optional[str] = None, user_id: Optional[int] = None) -> None:
        famous_users = self.db.get('BioWars', 'FamousUsers')
        if (username in famous_users) or (user_id in famous_users):
            return

        if username and user_id:
            famous_users[user_id] = username
        # –ï—Å–ª–∏ –µ—Å—Ç—å —é–∑–µ—Ä –∞–π–¥–∏, –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        if not username:
            if user_id not in famous_users.keys():
                try:
                    user = await self.client.get_entity(user_id)
                    username = user.username if user.username else None
                    famous_users[user_id] = username
                except:
                    return None
        if not user_id:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º, —Ç–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ —é–∑–µ—Ä –∞–π–¥–∏
            if username not in famous_users.values():
                try:
                    user = await self.client.get_entity(username)
                    user_id = user.id
                    famous_users[user_id] = username
                except:
                    return None
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ
        self.db.set('BioWars', 'FamousUsers', famous_users)

    async def save_last_infect(self, user: Optional[str]) -> None:
        if user:
            user = user.replace('@', '')
            if not user.isdigit():
                if user.startswith('https://t.me/'):
                    user = user.replace('https://t.me/', '')
                user = await self.return_user(username=user)

        save = user if user else None
        self.db.set('BioWars', 'LastInfect',
                    save)

    # –ù—É–∂–µ–Ω –∫–ª–∞—Å—Å —á–∞—Ç–∞, –∞ –Ω–µ –∞–π–¥–∏ —á–∞—Ç–∞
    async def get_members_chat(self, chat: Channel) -> Union[list, str]:
        offset_user = 0    # –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ
        limit_user = 50   # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑

        users = []   # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞

        filter_user = ChannelParticipantsSearch('')
        try:
            while True:
                participants = await self.client(GetParticipantsRequest(
                    chat,
                    filter_user,
                    offset_user,
                    limit_user,
                    hash=0))
                if not participants.users:
                    break

                users.extend(participants.users)
                offset_user += len(participants.users)
            ids = [i.id for i in users]
            return ids

        except TypeError:
            return 'NotChat'

    async def _handler_link(self, link) -> Optional[str]:
        if link.startswith(self.strings("link_id")):
            return "@" + link.replace(self.strings("link_id"), "")
        elif link.startswith(self.strings("link_username")):
            return "@" + link.replace(self.strings("link_username"), "")
        else:
            return None

    async def number_convert(self, number: int) -> str:
        if number >= 1000000000:
            return f"{number / 1000000000:.1f}B"
        elif number >= 1000000:
            return f"{number / 1000000:.1f}M"
        elif number >= 1000:
            return f"{number / 1000:.1f}k"
        else:
            return str(number)

    async def get_pref(self) -> str:
        return self.db.get("hikka.main", "command_prefix", ".")

    async def _generator_links(self, reply, args: str) -> Union[list, str]:
        list_args, lis = [], []
        for i in args.split(" "):
            if "-" in i:
                ot_do = i.split("-")
                try:
                    list_args.extend(
                        str(x) for x in range(int(ot_do[0]), int(ot_do[1]) + 1)
                    )
                except Exception:
                    return "wrong_ot-do"

            else:
                list_args.append(i)

        a = reply.text
        entity = reply.get_entities_text()
        users = []
        # validate_text = await self.validate_text(text)

        for e in entity:
            if isinstance(e[0], MENT):
                url = e[1]
                # if not url.startswith('@'):
                # continue

                users.append(url)

            elif isinstance(e[0], METU):
                url = await self._handler_link(e[0].url)
                users.append(url)

        for arg in list_args:
            lis.append(users[int(arg)-1])

        return lis

    async def _o_generator_links(self, reply: Message) -> Union[list, str]:
        lis = []
        json = Json.loads(reply.to_json())
        try:
            for i in range(len(reply.entities)):
                try:
                    link = json["entities"][i]["url"]
                    if link.startswith("tg"):
                        users = "@" + link.split("=")[1]
                        lis.append(users)
                    elif link.startswith("https://t.me"):
                        a = "@" + str(link.split("/")[3])
                        lis.append(a)
                    else:
                        return "hueta"
                except Exception:
                    blayt = reply.raw_text[
                        json["entities"][i]["offset"]: json["entities"][i]["offset"]
                        + json["entities"][i]["length"]
                    ]
                    lis.append(blayt)
            return lis
        except TypeError:
            return "hueta"

    async def get_top_zhertv(self, message: Message, num_list: int) -> None:
        import operator
        # C–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞—Ä–ª–∏—Å—Ç–∞
        infList = self.db.get('NumMod', 'infList')
        a = {}
        zhertvs = []
        for k, v in infList.items():
            a[k] = int(float((v[0]))) if not 'k' in v[0] else int(
                float(v[0][:-1].replace(',', '.')) * 1000)

        sort = sorted(a.items(), key=operator.itemgetter(1), reverse=True)

        sort_dict = dict(sort)

        users = list(sort_dict.keys())

        for i in range(0, len(users), 50):
            e_c = users[i: 50 + i]

            if len(e_c) < 50:
                e_c = e_c + [None for y in range(50 - len(e_c))]
            zhertvs.append(e_c)

        if num_list > len(zhertvs):
            await utils.answer(message, '–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤–∫–ª–∞–¥–∫–∏ –Ω–µ—Ç')
            return
        # ------------------------------------------------
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∂–µ—Ä—Ç–≤–∞–º–∏

        infectBefore = self.db.get(
            'BioWars', 'InfectionBefore')
        niks = self.db.get('BioWars', 'UsersNik')
        all_exps = int(sum([eval(i[0].replace(",", ".").replace(
            'k', '*1000')) for i in list(infList.values())]))
        bio_exp = await self.number_convert(all_exps)
        all_exps = '{:,}'.format(all_exps).replace(',', ' ')

        sms = f'–¢–æ–ø –≤–∞—à–∏—Ö –∂–µ—Ä—Ç–≤({num_list}/{len(zhertvs)}): \n'
        count = 1

        for i in zhertvs[num_list-1]:
            if not i:
                continue
            user = infList[i]
            zar_do = infectBefore[i] if i in infectBefore.keys(
            ) else '<b>–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞</b>'
            if i[1:] in niks.keys():
                nik = niks[str(i[1:])]
                usr = f'<a href="tg://openmessage?user_id={i[1:]}">{nik}</a>'
            else:
                usr = i
            sms += f'{count}. {usr} | +{user[0]} | –∑–∞—Ä–∞–∂–µ–Ω–∏–µ –¥–æ {zar_do} \n'
            count += 1

        sms += f'\nüìä –ò—Ç–æ–≥–æ: {len(infList)} –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö –∏ {bio_exp} –±–∏–æ-–æ–ø—ã—Ç–∞ \n'
        sms += f'üß¨ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–µ–º–∏—è: {all_exps} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–∞'
        await self.send(sms, message)

    async def get_zhertv(self, message: Message, num_list: int) -> None:
        infList = self.db.get('NumMod', 'infList')
        users = list(reversed(infList.keys()))
        zhertvs = []

        for i in range(0, len(users), 50):
            e_c = users[i: 50 + i]

            if len(e_c) < 50:
                e_c = e_c + [None for y in range(50 - len(e_c))]
            zhertvs.append(e_c)

        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

        if num_list > len(zhertvs):
            await utils.answer(message, '–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤–∫–ª–∞–¥–∫–∏ –Ω–µ—Ç')
            return

        infectBefore = self.db.get('BioWars', 'InfectionBefore')
        niks = self.db.get('BioWars', 'UsersNik')
        all_exps = int(sum([eval(i[0].replace(",", ".").replace(
            'k', '*1000')) for i in list(infList.values())]))
        bio_exp = await self.number_convert(all_exps)
        all_exps = '{:,}'.format(all_exps).replace(',', ' ')

        sms = f'–í–∞—à–∏ –∂–µ—Ä—Ç–≤—ã({num_list}/{len(zhertvs)}): \n'
        count = 1

        for i in zhertvs[num_list-1]:
            if not i:
                continue
            user = infList[i]
            zar_do = infectBefore[i] if i in infectBefore.keys(
            ) else '<b>–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞</b>'
            if i[1:] in niks.keys():
                nik = niks[str(i[1:])]
                usr = f'<a href="tg://openmessage?user_id={i[1:]}">{nik}</a>'
            else:
                usr = i
            sms += f'{count}. {usr} | +{user[0]} | –∑–∞—Ä–∞–∂–µ–Ω–∏–µ –¥–æ {zar_do} \n'
            count += 1

        sms += f'\nüìä –ò—Ç–æ–≥–æ: {len(infList)} –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö –∏ {bio_exp} –±–∏–æ-–æ–ø—ã—Ç–∞ \n'
        sms += f'üß¨ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–µ–º–∏—è: {all_exps} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–∞'
        await self.send(sms, message)

    async def bio(self, reply: Message, me: User) -> None:

        infList = self.db.get("NumMod", "infList")
        b = reply.raw_text.splitlines()

        niks = self.db.get('BioWars', 'UsersNik')
        chat_flag = True if '–ë–∏–æ—Ç–æ–ø —á–º–æ–Ω–µ–π' in b[0] or 'üè¢ –£–ß–ê–°–¢–ù–ò–ö–ò –ö–û–†–ü–û–†–ê–¶–ò–ò' in b[0] else False
        b.pop(0)
        sms = ''
        exps = []
        # Add exp
        for i in b:
            try:
                a = i.split('|')
                if not chat_flag:
                    continue
                exps.append(a[-2])
            except:
                pass

        json = Json.loads(reply.to_json())

        if len(exps) == 0:

            entity = reply.get_entities_text()
            users = []

            for e in entity:
                if isinstance(e[0], MENT):
                    url = e[1]
                    users.append(url)
                elif isinstance(e[0], METU):
                    url = await self._handler_link(e[0].url)
                    users.append(url)
            count = 1
            for i in users:
                if str(i[1:]) == str(me.id):
                    name = me.first_name
                    sms += f'{str(count)}. üîÜ <a href= "tg://openmessage?user_id={me.id}">{name}</a>\n'
                    count += 1
                    continue

                if str(i[1:]) in niks:
                    nik = niks[str(i[1:])]
                    name = f"<a href='tg://openmessage?user_id={i[1:]}'>{nik}</a>"
                else:
                    name = i

                exp = infList[i][0] if i in infList else None
                exp = f'‚ò¢Ô∏è {exp} –æ–ø—ã—Ç–∞' if exp else 'üÜï –ù–æ–≤–∞—è –∂–µ—Ä—Ç–≤–∞'
                sms += f'{count}. {name} | {exp} \n'
                count += 1
            return sms

        else:
            count = 1
            for i in range(0, len(b)):
                try:
                    exp = exps[i].replace(",", ".")
                    s = exp.find(' –æ–ø—ã—Ç')
                    exp = exp[1:s].replace(' ', '')
                    if 'k' in exp:
                        exp_count = float(exp[:-1])
                        if exp_count < 10.0:
                            exp = int(round(exp_count * 100, 0))

                        else:
                            exp_count = float(exp[:-1])
                            exp_count = int(exp_count)
                            exp = str(exp_count / 10) + 'k'

                    else:
                        exp_count = int(exp)
                        exp = exp_count // 10

                except:
                    exp = None

                link = json["entities"][i]["url"]
                bla = []
                if link.startswith('tg'):
                    for i in link.split('='):
                        bla.append(i)

                    if str(bla[1]) == str(me.id):
                        name = me.first_name
                        sms += f'{str(count)}. üîÜ <a href= "tg://openmessage?user_id={me.id}">{name}</a> | {exp} –æ–ø—ã—Ç–∞ \n'
                        count += 1
                        continue

                    user_id = bla[1]
                    if '@' + str(user_id) in infList:
                        if chat_flag:
                            user = infList['@' + str(user_id)]
                            usr_exp = user[0].replace(',', '.')
                            exp_count = str(exp)

                            if usr_exp[-1] == 'k':
                                usr_exp = float(usr_exp[:-1]) * 1000

                            if exp_count[-1] == 'k':
                                exp_count = float(exp_count[:-1]) * 1000

                            result = int(float(exp_count) - float(usr_exp))

                            # abc.append(str(result))

                            if result > 0:
                                if result < 1000:
                                    result = f'‚úÖ [+{str(result)}]'
                                else:
                                    result = f'‚úÖ [+{str(round(float(result) / 1000, 1))}k]'
                            elif result == 0:
                                result = f' üü∞ [{str(result)}]'

                            else:
                                if result > -1000:
                                    result = f'‚ùå [{str(result)}]'
                                else:
                                    result = f'‚ùå [{str(round(float(result) / 1000, 1))}k]'
                            zh = f"({user[0]}) | <b>{result}</b>"
                        else:
                            zh = f"‚ò¢Ô∏è (+{infList['@' + str(user_id)][0]})"
                    else:
                        if chat_flag:  # –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Ç –∏ –∂–µ—Ä—Ç–≤—ã –Ω–µ—Ç –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ
                            exp_count1 = str(exp)
                            if exp_count1[-1] == 'k':
                                exp_count1 = float(exp_count1[:-1]) * 1000

                            if round(float(exp_count1), 1) < 10000.0:  # +{}–∫
                                zh = f'| üÜï <b>[+{round(float(exp_count1) / 1000,1)}]</b>'
                            else:  # + {}
                                zh = f'| üÜï <b>[+{round(float(exp_count1)/ 1000,1)}k]</b>'
                        else:
                            zh = ''

                    try:
                        if str(bla[1]) in niks:
                            nik = niks[str(bla[1])]
                            name = f"<a href='tg://openmessage?user_id={bla[1]}'>{nik}</a>"
                        else:
                            name = '@' + str(bla[1])

                        exp = f'| {exp}'
                        sms += f'{str(count)}. {name} {zh} {exp} –æ–ø—ã—Ç–∞ \n'

                    except:
                        if str(bla[1]) in niks:
                            nik = niks[str(bla[1])]
                            name = f"<a href='tg://openmessage?user_id={bla[1]}'>{nik}</a>"
                        else:
                            name = '@' + str(bla[1])

                        exp = f'| {exp}'
                        sms += f'{str(count)}. {name} {zh} {exp} –æ–ø—ã—Ç–∞ \n'
                count += 1
            return sms

    async def message_q(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
        self,
        text: str,
        bot_id: int = 5443619563,
        mark_read: bool = True,
        delete: bool = True,
    ) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        async with self.client.conversation(bot_id, exclusive=False) as conv:
            try:
                msg = await conv.send_message(text)
                response = await conv.get_response()
                if mark_read:
                    await conv.mark_read()
                if delete:
                    await msg.delete()
                    await response.delete()
                return response.text
            except TimeoutError:
                return "Timeout"


# -----------------------Commands in watcher----------


    async def z_command(self, message: Message, args_raw: str, text: str, reply: Message) -> None:
        if self.db.get("BioWars", "infStatus"):
            await message.reply('‚ùé –ó–∞—Ä–∞–∂–µ–Ω–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã')
            return

        if not args_raw and not reply:  # .z - –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
            text = self.strings("no.args_and_reply")
            await utils.answer(message, text)
            return

        if (reply and not args_raw):
            entities = reply.get_entities_text()
            if re.search(r"üë®üèª‚Äçüî¨ –ë—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞—Ä–∞–∂–µ–Ω–∏—è", reply.text):

                infect = await self._handler_link(entities[1][0].url)
                self.db.set("BioWars", "infStatus", True)
                await message.reply(f"–±–∏–æ–µ–± {infect}")

                await self.save_last_infect(str(infect))
                self.db.set("BioWars", "infStatus", False)
                return

            elif len(entities) == 1 and len(entities[0]) == 2:
                user_id = entities[0][1]

                if not user_id.startswith('@'):
                    return

                self.db.set("BioWars", "infStatus", True)
                await message.reply(f"–±–∏–æ–µ–± {user_id}",)

                await self.save_last_infect(str(user_id))
                self.db.set("BioWars", "infStatus", False)

            else:
                user_id = reply.sender_id

                self.db.set("BioWars", "infStatus", True)
                await message.reply(f"–±–∏–æ–µ–± @{user_id}",)

                await self.save_last_infect(str(user_id))
                self.db.set("BioWars", "infStatus", False)

            return
        if reply and args_raw == '–æ':

            ids = await self._o_generator_links(reply)

            self.db.set("BioWars", "infStatus", True)

            for i in ids:
                interval = self.db.get("BioWars", "infInterval", 4)
                await message.client.send_message(
                    message.peer_id, f"–±–∏–æ–µ–± {i}", reply_to=reply
                )
                await asyncio.sleep(interval)

            else:
                await message.reply('‚úÖ –ó–∞—Ä–∞–∂–µ–Ω–∏—è –æ–∫–æ–Ω—á–µ–Ω—ã!')

            self.db.set("BioWars", "infStatus", False)
            return

        if reply and args_raw:
            users = await self._generator_links(reply, args_raw)

            if len(users) == 1:
                self.db.set("BioWars", "infStatus", True)
                await message.reply(f"–±–∏–æ–µ–± {users[0]}")

                await self.save_last_infect(users[0])
                self.db.set("BioWars", "infStatus", False)
            else:
                self.db.set("BioWars", "infStatus", True)
                interval = self.db.get("BioWars", "infInterval", 4)
                for infect in users:
                    if self.db.get("BioWars", "infStatus"):
                        await message.reply(f"–±–∏–æ–µ–± {infect}",)
                        await asyncio.sleep(interval)
                    else:
                        return
                else:
                    await message.reply('‚úÖ –ó–∞—Ä–∞–∂–µ–Ω–∏—è –æ–∫–æ–Ω—á–µ–Ω—ã!')

                self.db.set("BioWars", "infStatus", False)
                return

    async def id_command(self, message: Message, args: str, reply) -> None:
        if not args and not reply:
            user = await self.client.get_me()

        elif reply:
            user_id = reply.sender_id
            user = await message.client.get_entity(user_id)

        elif args.startswith("@"):
            if args[1:].isdigit():
                user_id = int(args[1:])
            else:
                user_id = args[1:]

            user = await message.client.get_entity(user_id)
        else:
            return

        username = user.username if user.username else "–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç"
        await self.write_user(username, user.id)
        await self.client.send_message(
            message.chat_id,
            self.strings("get_user").format(
                user.id, user.first_name, username, user.id
            ),
            reply_to=reply,
        )

    async def ids_command(self, message: Message, args_raw: str, reply) -> None:
        if not reply:
            await utils.answer(message, self.strings("no.reply"))
            return
        ids = (
            await self._generator_links(reply, args_raw)
            if args_raw
            else await self._o_generator_links(reply)
        )
        for i in ids:
            await message.client.send_message(
                message.peer_id, f".–∏–¥ {i}", reply_to=reply
            )
            await asyncio.sleep(3.5)
        else:
            await message.respond("<b>–í—Å–µ –∞–π–¥–∏ –ø—Ä–æ—á–µ–∫–∞–Ω—ã!</b>")

    async def dov_command(
        self, message: Message, args_list: list, args_raw: str, reply
    ) -> None:

        numfilter = self.db.get("NumMod", "numfilter")
        biowars_dovs = self.db.get("BioWars", "DovUsers")
        pref = await self.get_pref()

        if not args_raw and not reply:
            status_emj = "‚ñ∂Ô∏è" if self.config["–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏"] else "‚è∏"
            status = "–í–∫–ª—é—á–µ–Ω–æ" if self.config["–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏"] else "–í—ã–∫–ª—é—á–µ–Ω–æ"
            nik = numfilter["filter"] if numfilter["filter"] else "–ù–µ   —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

            text_message = self.strings("dov").format(
                pref, nik, status_emj, status
            )
            await self.send(text_message, message)
            return

        if args_list[0].lower() == "set":
            # –ï—Å–ª–∏ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ç–æ —Å—Ç–∞–≤–∏–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ 3 –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ 3 —Ç–∏–ø–∞ –∏–Ω—Ç —Å—Ç–∞–≤–∏–º —É—Ä–æ–≤–µ–Ω—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –Ω–µ–º

            level = None
            data = args_list[1:]
            logging.info(f'{data}')
            if reply:
                user_id = str(reply.sender_id)
                if data:
                    level = int(data[0]) if data[0].isdigit() else None
                if not level:
                    level = None

            elif re.fullmatch(r"@\d+", data[0]):
                user_id = data[0].replace('@', '')
                # try:
                if len(data) >= 2:
                    level = int(data[1]) if data[1].isdigit() else None
                if not level:
                    level = None
                # except Exception:
                    # await utils.answer(message, self.strings('args_error'))
                    # return
            else:
                await utils.answer(message, self.strings('args_error'))
                return
            # –Ø –∑–Ω–∞—é —á—Ç–æ in —Ä–∞—Å–ø–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ user_id

            if level and user_id in biowars_dovs.keys():
                old_level = biowars_dovs[user_id]
                biowars_dovs[user_id] = level
                self.db.set("BioWars", "DovUsers", biowars_dovs)
                await utils.answer(message, self.strings('dov.edit_level').format(user_id, old_level, level))

                return

            elif str(user_id) in biowars_dovs.keys():
                numfilter["users"].remove(str(user_id))
                biowars_dovs.pop(user_id)
                self.db.set("BioWars", "DovUsers", biowars_dovs)
                await utils.answer(message, self.strings("dov.rem").format(user_id))
                return
            else:
                logging.info(
                    f'{user_id} - {level}')
                level = level if level else 1
                numfilter["users"].append(user_id)
                biowars_dovs[user_id] = level
                text_message = self.strings("dov.add").format(user_id, level)
                self.db.set("BioWars", "DovUsers", biowars_dovs)

                await utils.answer(message, text_message)
                return

        elif args_list[0].lower() == "nik":
            if args_list[1]:
                if len(args_list[1]) > 8 or len(args_list) >= 3:
                    await utils.answer(message, self.strings("len_error"))
                    return

                old_nik = numfilter["filter"] if numfilter["filter"] else "–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç"
                nik = args_list[1]
                numfilter['filter'] = nik
                self.db.set("NumMod", "numfilter", numfilter)
                await utils.answer(message,
                                   self.strings("nick.rename").format(
                                       old_nik, nik)
                                   )

            else:
                await utils.aswer('–ö–∞–∫–æ–π –Ω–∏–∫ –±—É–¥–µ–º —Å—Ç–∞–≤–∏—Ç—å?')
                return

        elif args_list[0].lower() == "dovs":
            niks = self.db.get('BioWars', 'UsersNik')

            dovs_users = ''

            if len(args_list) > 1 and args_list[1].lower() == 'chat':
                r = await self.get_members_chat(message.chat)
                if r == 'NotChat':
                    await utils.answer(message, '–≠—Ç–æ –Ω–µ —á–∞—Ç')
                    return
                else:
                    users = r
                i = 1
                for user in users:
                    if str(user) in biowars_dovs.keys():
                        level = biowars_dovs[str(user)]

                        level = '4—É—Ä <b>(üîê –ü–æ–ª–Ω—ã–π –î–æ—Å—Ç—É–ø)</b>' if level == 4 else f'{level} —É—Ä'

                        if str(user) in niks.keys():
                            nik = niks[str(user)]
                            usr = f'<a href="tg://openmessage?user_id={user}">{nik}</a>'
                        else:
                            usr = f'<code>@{user}</code>'

                        dovs_users += f'<b>{i})</b> {usr} - {level} \n'
                        i += 1
                dovs_users = dovs_users if dovs_users else '–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç'

                await self.send(self.strings('dov.users.chat').format(dovs_users), message)
                return
            for i, (user_id, level) in enumerate(biowars_dovs.items(), start=1):

                level = '4—É—Ä <b>(üîê –ü–æ–ª–Ω—ã–π –î–æ—Å—Ç—É–ø)</b>' if level == 4 else f'{level} —É—Ä'

                if str(user_id) in niks.keys():
                    nik = niks[str(user_id)]
                    usr = f'<a href="tg://openmessage?user_id={user_id[1:]}">{nik}</a>'
                else:
                    usr = f'<code>@{user_id}</code>'

                dovs_users += f'<b>{i})</b> {usr} - {level} \n'
            await self.send(self.strings('dov.users').format(dovs_users), message)
            return

        elif args_list[0].lower() == "prefs":
            prefs_users = self.db.get('BioWars', 'FamousPrefs')
            niks = self.db.get('BioWars', 'UsersNik')
            prefs = ''
            if len(args_list) > 1 and args_list[1].lower() == 'chat':
                r = await self.get_members_chat(message.chat)
                if r == 'NotChat':
                    await utils.answer(message, '–≠—Ç–æ –Ω–µ —á–∞—Ç')
                    return
                else:
                    users = r
                i = 1
                for user in users:
                    if str(user) in prefs_users.keys():
                        pref = prefs_users[str(user)]

                        if str(user) in niks.keys():
                            nik = niks[str(user)]
                            usr = f'<a href="tg://openmessage?user_id={user}">{nik}</a>'
                        else:
                            usr = f'<code>@{user}</code>'

                        prefs += f'<b>{i})</b> {usr} | {pref} \n'
                        i += 1
                prefs = prefs if prefs else '–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç'

                await self.send(self.strings('dov.prefs.chat').format(prefs), message)
                return

            for i, (user_id, pref) in enumerate(prefs_users.items(), start=1):
                if str(user_id) in niks.keys():
                    nik = niks[str(user_id)]
                    usr = f'<a href="tg://openmessage?user_id={user_id[1:]}">{nik}</a>'
                else:
                    usr = f'<code>@{user_id}</code>'
                prefs += f'<b>{i})</b> {usr} | {pref} \n'

            prefs = prefs if prefs else '–¢—É—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç'

            await self.send(self.strings('dov.prefs').format(prefs), message)
            return

        elif args_list[0].lower() == "st":
            status = self.config["–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏"]
            if status:
                self.config["–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏"] = False
                await utils.answer(message, self.strings("dov.status.   False"))
            else:
                self.config["–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏"] = True
                await utils.answer(message, self.strings("dov.status.True"))

    async def bio_command(self, message: Message, reply: Message, me) -> None:
        if reply.text.startswith('–ë–∏–æ—Ç–æ–ø —á–º–æ–Ω–µ–π:'):
            sms = choice(self.strings('messages.biotop')) + '\n'
        else:
            sms = choice(self.strings('messages.misc')) + '\n'

        sms += await self.bio(reply, me)

        await self.send(sms, message)

    async def nik_command(self, message: Message, args_list: list, args_raw: str) -> None:

        user_id = args_list[0].replace('@', '')
        user_nikname = ' '.join(args_list[1:])
        await self.save_nik(user_id, user_nikname)
        await utils.answer(message, self.strings('edit_nik').format(user_id, user_nikname))

    async def pref_command(self, message: Message, args_list: list) -> None:
        user_id = args_list[0].replace('@', '')
        user_pref = ' '.join(args_list[1:])
        await self.save_pref(user_id, user_pref)
        await utils.answer(message, self.strings('edit_pref').format(user_pref, user_id))

# -----------------------Commands-------------------

    async def biotoolscmd(self, message: Message) -> None:
        """–ü–æ–º–æ—â—å –ø–æ –º–æ–¥—É–ª—é"""
        args_raw = utils.get_args_raw(message)
        infList = self.db.get("NumMod", "infList")
        famous_users = self.db.get('BioWars', 'FamousUsers')
        dov_users = self.db.get("BioWars", "DovUsers")
        if not args_raw:
            pref = await self.get_pref()
            commands = ""
            comm = self.strings("—Åommands")
            for com, desc in comm.items():
                commands += f"‚ñ´Ô∏è <code>{pref}{com}</code> {desc} \n"
                text = self.strings("bio.commands").format(
                    pref, commands)

        elif args_raw.lower() == "–∑–∞—Ä–ª–∏—Å—Ç":
            text = self.strings("bio.zar").format()
        elif args_raw.lower() == "–¥–æ–≤–µ—Ä–∫–∞":
            text = self.strings("bio.dov").format()
        elif args_raw.lower() == '–¥–æ–≤–µ—Ä–∫–∞ -—É—Ä–æ–≤–Ω–∏':
            text = self.strings("bio.dov.levels")
        elif args_raw.lower() == '–∏–Ω—Ñ–æ':
            exps = int(sum([eval(i[0].replace(",", ".").replace(
                'k', '*1000')) for i in list(infList.values())]))
            text = self.strings("bio.info").format(
                len(infList.keys()),
                '{:,}'.format(exps).replace(',', ' '),
                len(famous_users.keys()),
                len(dov_users.keys())
            )

        else:
            await utils.answer(message, "–ß—Ç–æ —Ç–æ —è–≤–Ω–æ –Ω–µ —Ç–∞–∫")
            return
        await self.send(text, message)
        return

    # @loader.watcher("only_pm", "only_messages")
    async def watcher(self, message: Message):
        if not isinstance(message, Message):
            return

        text = message.text
        reply = await message.get_reply_message()
        sndr_id = message.sender_id
        me = await self.client.get_me()
        pref = await self.get_pref()
        args_list, args_raw = utils.get_args(
            message), utils.get_args_raw(message)
        infList = self.db.get("NumMod", "infList")
        msg_splitlines_1 = message.raw_text.splitlines()[0] if text else ''

        # –û—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∞–≤—Ç–æ–∑–∞–ø–∏—Å–µ –∂–µ—Ä—Ç–≤
        # –ë–µ—Ä–µ–º –∞–π–¥–∏/—é–∑–µ—Ä–Ω–µ–π–º –∏–∑ —Å–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥ (–≤ –±–¥ –±—É–¥–µ—Ç –ª–µ–∂–∞—Ç—å –∞–π–¥–∏ –∑–∞—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ)
        if mes := re.fullmatch(r'(–±–∏–æ–µ–±|–±–∏–æ–µ–±) (?P<lvl>[1-9]?[0]?\s)?((https?://)?t\.me/|@)([0-9a-z_A-Z]+)', msg_splitlines_1.lower()):
            if not self.config["–ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∂–µ—Ä—Ç–≤"]:
                return
            if str(me.id) != str(sndr_id):
                return
            user = mes.group(5)
            await self.save_last_infect(user)
            return

        if re.search(r'(–±–∏–æ–µ–±|–±–∏–æ–µ–±) (?P<lvl>[1-9]?[0]?\s)?(—Ä–∞–≤–Ω–æ–≥–æ|—Å–ª–∞–±–µ–µ|—Å–∏–ª—å–Ω–µ–µ|—Ä|=|-|\+)', msg_splitlines_1.lower()):
            if not self.config["–ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∂–µ—Ä—Ç–≤"]:
                return
            if str(me.id) != str(sndr_id):
                return

            user = None

            await self.save_last_infect(user)
            return

        # –ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∂–µ—Ä—Ç–≤
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Ç—É –±–µ—Ä–µ–º –µ–µ –∏–∑ –±–¥
        if mes := re.search(r'ü¶† <a href="(?P<link>(?:https?://)?t\.me/[0-9a-z_]+|tg://openmessage\?user_id=(?P<id>[0-9]+))">.{1,255}</a> –ø–æ–¥–≤–µ—Ä.{1,2} –∑–∞—Ä–∞–∂–µ–Ω–∏—é', text):
            if not self.config["–ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∂–µ—Ä—Ç–≤"]:
                return

            mes = mes.groupdict()
            vremya = datetime.now(pytz.timezone(
                "Europe/Moscow"))
            msg_text = text
            split_text = text.splitlines()
            irises_id = [
                5443619563,
                707693258,
                5226378684,
                5137994780,
                5434504334,
                1136703023,
                1120322272

            ]
            if sndr_id not in irises_id:
                return
            attempts = "üóì –û—Ç—á—ë—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:"
            podverg = split_text[0] if attempts not in msg_text else split_text[3]
            retur = 0

            if mes['id'] == str(me.id):
                retur = 1

            elif me.username:
                if mes['link'] == 'https://t.me/' + me.username.lower():
                    retur = 1

                else:
                    return
            else:
                return

            if not retur:
                return

            reg = r"""ü§í –ó–∞—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ (\d+) –¥–Ω[—è–µ–π]{,2}
‚ò£Ô∏è +(.*) –±–∏–æ-–æ–ø—ã—Ç–∞"""

            s = re.compile(reg)
            info = s.search(msg_text)

            letal = int(info.group(1))
            count = info.group(2).replace('+', '')

            try:
                x = msg_text.index('user?id=') + 8
                user = msg_text[x:].split('"', maxsplit=1)[0]
                self.db.set('BioWars', 'LastInfect', None)

            except ValueError:  # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∂–µ—Ä—Ç–≤—É —Ç–æ –±–µ—Ä–µ–º –µ–µ –∏–∑ –±–¥
                # –ï—Å–ª–∏ –≤ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –µ—Å—Ç—å —Ä–µ–ø–ª–∞–π, —Ç–æ –±–µ—Ä–µ–º –∞–π–¥–∏ –∏–∑ —Ä–µ–ø–ª–∞—è, –∏–Ω–∞—á–µ –∏–∑ –±–¥
                if reply:
                    t = reply.raw_text.splitlines()[0]
                    if '@' in t:
                        s = t.find('@')
                        user = t[s:].replace('@', '')
                    else:
                        s = t.find('https://t.me/')
                        user = t[s:].replace('https://t.me/', '')

                    if not user.isdigit():
                        user = await self.return_user(username=user)

                    self.db.set('BioWars', 'LastInfect', None)

                else:
                    # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞—Ä–∞–∂–µ–Ω–Ω–æ–º
                    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –¢—Ä—É(—Ç–æ–µ—Å—Ç—å –µ—â–µ –Ω–µ –∑–∞—Ä–∞–∂–ª–∏ –µ–≥–æ)
                    # –¢–æ –±–µ—Ä–µ–º –µ–≥–æ –∞–π–¥–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –¥–±
                    user = self.db.get('BioWars', 'LastInfect')
                    # self.db.set('BioWars', 'LastInfect',
                    #            {'user_id': user['user_id'],
                    #            'status': False})
                    self.db.set('BioWars', 'LastInfect', None)

                    # user = user['user_id']
            if not user:
                return
            letal_in_db = self.db.get('BioWars', 'YourLetal')
            user = '@' + str(user)
            if letal != letal_in_db:
                self.db.set('BioWars', 'YourLetal', letal)

            vremya1 = vremya.strftime("%d.%m")
            vremya_do = vremya.strftime("%d.%m") if letal == 1 else (vremya +
                                                                     timedelta(days=int(letal))).strftime("%d.%m.%Y")

            # –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ
            # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—Ä–ª–∏—Å—Ç–∞ –Ω–∞–º–º–æ–¥–∞
            infectBefore = self.db.get('BioWars', 'InfectionBefore')
            infectBefore[user] = vremya_do

            self.db.set('Biowars', 'InfectionBefore', infectBefore)
            old_count = ' ' + str(infList[user][0]) if user in infList else ''
            if user in infList:
                del infList[user]

            infList[user] = [str(count), vremya1]

            self.db.set("NumMod", "infList", infList)

            if message.chat_id != -1316297204:
                await message.reply(self.strings('zar.save').format(user, old_count, count, vremya_do))

            return
        # –ß–∞—Ç –∞–π–¥–∏ –ª–æ–∫–¥–∞—É–Ω–∞
        if message.chat_id == -1316297204:
            return

        if re.fullmatch(r"–∂–¥\s@\d{3,12}.{,10}", text, flags=re.ASCII):
            if str(sndr_id) != (me.id):
                return

        elif re.fullmatch(r"–∂–ª\s@\d{3,12}", text, flags=re.ASCII):
            if str(sndr_id) != str(me.id):
                return

        # -----------------------Commands-------------------
        owners = list(getattr(self.client.dispatcher.security, "owner"))

        if text.startswith(pref) and sndr_id in owners:
            command = text.replace(pref, "").split()[0].lower()
            if command not in self.strings("—Åommands"):
                return

            if command == "z":
                await self.z_command(message, args_raw, text, reply)
                return
            elif command == "id":
                await self.id_command(message, args_raw, reply)
                return
            elif command == "ids":
                await self.ids_command(message, args_raw, reply)
                return
            elif command == "dov":
                await self.dov_command(message, args_list, args_raw, reply)
                return
            elif command == 'zz':
                await self.bio_command(reply, me)
                return
            elif command == 'nik':
                await self.nik_command(message, args_list, args_raw)
                return
            elif command == 'pref':
                await self.pref_command(message, args_list)
                return

        numfilter = self.db.get("NumMod", "numfilter")
        if self.config["–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏"] and str(sndr_id) in self.db.get("BioWars", "DovUsers").keys() and numfilter['filter']:
            nik = numfilter['filter'].lower()

            if not text.lower().startswith(nik):
                return

            dov_users = self.db.get("BioWars", "DovUsers")

            level = dov_users[str(sndr_id)]
            # —É–±–∏—Ä–∞–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–º—è –¥–æ–≤–µ—Ä–∫–∏

            # text = text.replace(
            #    f"{nik} ", '', 1).replace(f'{nik}', '', 1)

            # –°–¥–µ–ª–∞–Ω–æ –∏–∑-–∑–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–±–ª–µ–º –∫ –∫–æ–º–∞–Ω–¥–æ–π replace
            # –û–Ω–æ –º–æ–∂–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –∏ —É–¥–∞–ª–∏—Ç—å —á–∞—Å—Ç—å –≤–≤–æ–¥–∏–º–æ–π –∫–æ–º–∞–Ω–¥—ã
            # –ü—Ä–∏–º–µ—Ä: –≤–∏—Ä +–≤–∏—Ä—É—Å—ã
            # –£–±–∏—Ä–∞–ª–æ –≤–∏—Ä –∏ —É–±–∏—Ä–∞–ª–æ –≤–∏—Ä –∏–∑ +–≤–∏—Ä—É—Å—ã, –≤ –∏—Ç–æ–≥–µ –æ—Å—Ç–∞–ª–æ–≤–∞–ª–æ—Å—å +—É—Å—ã

            text = text[len(
                nik)+1:] if f'{nik} ' in text.lower() else text[len(nik):]
            text_low = text.lower()
            text_norm = text

            args_raw = text
            args_list = text.split(' ')

            if level >= 1:
                if re.fullmatch('–∑', text_norm) and reply:
                    rtext = reply.raw_text

                    if '@' in rtext:
                        s = rtext.find('@')
                        a = rtext[s:].split('\n')
                        a = ' '.join(a).split(' ')
                        user_id = a[0]

                    else:
                        user_id = '@' + str(reply.sender_id)

                    if not user_id[1:].isdigit():
                        user_id = '@' + str(await self.return_user(username=user_id))

                    if user_id in infList:
                        user = infList[user_id]
                        infectBefore = self.db.get(
                            'BioWars', 'InfectionBefore')

                        zar_do = infectBefore[user_id] if user_id in infectBefore else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                        niks = self.db.get('BioWars', 'UsersNik')
                        if str(user_id[1:]) in niks.keys():
                            nik = niks[str(user_id[1:])]
                            usr = f'<a href="tg://openmessage?user_id={user_id[1:]}">{nik}</a>'
                        else:
                            usr = f'<code>{user_id}</code>'

                        await message.reply(self.strings('zar.search').format(usr, user[0], user[1], zar_do))
                    else:
                        await message.reply(self.strings('z.nf').format(user_id))
                    return

                elif send_mes–∞ := re.search(r"–∑\s", text):
                    en = message.entities[0]
                    link = message.raw_text[en.offset:en.offset+en.length]
                    user_id = await self._handler_link(link) if '@' not in link else link
                    if not user_id[1:].isdigit():
                        user_id = '@' + str(await self.return_user(username=user_id))

                    if user_id in infList:
                        user = infList[user_id]
                        infectBefore = self.db.get(
                            'BioWars', 'InfectionBefore')

                        zar_do = infectBefore[user_id] if user_id in infectBefore else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

                        niks = self.db.get('BioWars', 'UsersNik')
                        if str(user_id[1:]) in niks.keys():
                            nik = niks[str(user_id[1:])]
                            usr = f'<a href="tg://openmessage?user_id={user_id[1:]}">{nik}</a>'
                        else:
                            usr = f'<code>{user_id}</code>'

                        await message.reply(self.strings('zar.search').format(usr, user[0], user[1], zar_do))
                    else:
                        await message.reply(self.strings('z.nf').format(user_id))

                elif mes := re.fullmatch(r'(–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä|–∫|–∫–∞–ª–∫) (\w+) (\d+(-\d+)?)', text_low):

                    skill = mes.group(2)
                    n = mes.group(3).split('-')

                    if re.search(r"–∑–∑|–∑–∞—Ä–∞–∑[—É–∫–∞–Ω–æ—Å—Ç—å]{,5}", text_low,  flags=re.ASCII):
                        n1, n2 = int(n[0]), int(n[1])
                        step = self.strings('calc_formul')['zar']
                        total = 0
                        for i in range(n1+1, n2+1):
                            total += int(i ** step)
                        total = '{:,}'.format(total).replace(',', ' ')

                        text_msg = f'ü¶† –î–ª—è —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ ¬´–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å¬ª —Å {n1} –¥–æ {n2} —É—Ä–æ–≤–Ω—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è {total} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤ üß¨'
                        await message.reply(text_msg)
                        return

                    elif re.search(r"(?P<let>–ª–µ—Ç–∞–ª[—É–∫–∞—å–Ω–æ—Å—Ç—å]{,5})", text_low, flags=re.ASCII):
                        n1, n2 = int(n[0]), int(n[1])
                        step = self.strings('calc_formul')['letal']
                        total = 0
                        for i in range(n1+1, n2+1):
                            total += int(i ** step)
                        total = '{:,}'.format(total).replace(',', ' ')

                        text_msg = f'‚ò†Ô∏è –î–ª—è —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ ¬´–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å¬ª {n1} –¥–æ {n2} —É—Ä–æ–≤–Ω—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç {total} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤ üß¨'
                        await message.reply(text_msg)
                        return

                    elif re.search(r"(?P<pat>–ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5})", text_low, flags=re.ASCII):
                        n1, n2 = int(n[0]), int(n[1])
                        step = self.strings('calc_formul')['pat']
                        total = 0
                        for i in range(n1+1, n2+1):
                            total += int(i ** step)
                        total = '{:,}'.format(total).replace(',', ' ')

                        text_msg = f'‚ò†Ô∏è –î–ª—è —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ ¬´–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç–æ–≥–µ–Ω–æ–≤¬ª —Å {n1} –¥–æ {n2} –ø–æ—Ç—Ä–µ–±—É–µ—Ç {total} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤ üß¨'
                        await message.reply(text_msg)
                        return

                    elif re.search(r"(?P<kvala>–∫–≤–∞–ª[—É–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è]{,8}|—Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4})", text_low, flags=re.ASCII):
                        n1, n2 = int(n[0]), int(n[1])
                        step = self.strings('calc_formul')['kvala']
                        total = 0
                        for i in range(n1+1, n2+1):
                            total += int(i ** step)
                        total = '{:,}'.format(total).replace(',', ' ')

                        text_msg = f'üë®‚Äçüî¨ –î–ª—è —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ ¬´–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è¬ª {n1} –¥–æ {n2} —É—Ä–æ–≤–Ω—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è {total} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤ üß¨'
                        await message.reply(text_msg)
                        return

                    elif re.search(r"(?P<imun>–∏–º–º—É–Ω[—É–µ–∏—Ç–µ—Ç–∫–∞]{,4}|–∏–º—É–Ω[—É–µ–∏—Ç–µ—Ç–∫–∞]{,4})", text_low, flags=re.ASCII):
                        n1, n2 = int(n[0]), int(n[1])
                        step = self.strings('calc_formul')['imun']
                        total = 0
                        for i in range(n1+1, n2+1):
                            total += int(i ** step)
                        total = '{:,}'.format(total).replace(',', ' ')

                        text_msg = f'üõ° –î–ª—è —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ ¬´–∏–º–º—É–Ω–∏—Ç–µ—Ç¬ª —Å {n1} –¥–æ {n2} —É—Ä–æ–≤–Ω—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è {total} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤ üß¨'
                        await message.reply(text_msg)
                        return

                    elif re.search(r'(?P<sb>—Å–±|–±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3}|—Å–ª—É–∂–±[–∞—É]{,2})', text_low):
                        n1, n2 = int(n[0]), int(n[1])
                        step = self.strings('calc_formul')['sb']
                        total = 0
                        for i in range(n1+1, n2+1):
                            total += int(i ** step)
                        total = '{:,}'.format(total).replace(',', ' ')

                        text_msg = f'üïµÔ∏è‚Äç‚ôÇÔ∏è –î–ª—è —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ ¬´—Å–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª —Å {n1} –¥–æ {n2} —É—Ä–æ–≤–Ω—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è {total} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤ üß¨'

                        await message.reply(text_msg)
                        return
                    else:
                        return

                elif inf := re.search(
                    r"(–±–µ–π{,3}|–∫—É—Å[—å–∞–π–Ω–∏]{,3}|–∑–∞—Ä–∞–∑–∏[—Ç—å—Ç—å]{,3}|–µ–±[–Ω–∏–∞–∂—à—å]{,3}|—É–µ–±[–∏–∞–æ—à—Ç—å]{,3}|–æ–ø—É—Å—Ç[–∏]{,3}|–æ—Ä–≥–∞–Ω–∏–∑—É–π –≥–æ—Ä—è—á–∫—É{,3})",
                    text_low, flags=re.ASCII
                ):
                    inf = inf.group(1)

                    text = text.replace(
                        f"{inf} ", '').replace(inf, '')

                    args_raw = text
                    args_list = args_raw.split(' ')

                    if args_raw.lower() == '—Å—Ç–æ–ø':
                        status = self.db.get("BioWars", "infStatus")
                        if status:
                            self.db.set("BioWars", "infStatus", False)
                            await utils.answer(message, '‚úÖ –ó–∞—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
                            return
                        else:
                            await utils.answer(message, '‚ùé –ó–∞—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã!')
                            return

                    if args_list[0] == '–∏–Ω—Ç–µ—Ä–≤–∞–ª':
                        if args_list[1] and args_list[1].isdigit():
                            time = float(args_list[1].replace(',', '.'))
                            self.db.set("BioWars", "infInterval", time)
                            await utils.answer(message, f'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞—Ä–∞–∂–µ–Ω–∏—è–º–∏: {time} —Å')
                            return
                        else:
                            await utils.answer(message, f'‚ùé –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–≤–µ—Ä–≤–∞–ª!')
                            return
                    if send_mes–∞ := re.search(r"(?P<lvl>[1-9]?[0]?\s)?(?P<link>@[0-9a-zA-Z_]+|(?:https?://)?t\.me/[0-9a-zA-Z_]+|tg://openmessage\?user_id=(?P<id>[0-9]+))", text):
                        if self.db.get("BioWars", "infStatus"):
                            await message.reply('‚ùé –ó–∞—Ä–∞–∂–µ–Ω–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã')
                            return

                        send_mes–∞ = send_mes–∞.groupdict()

                        send_mes–∞['link'], send_mes–∞['id'] = '@' + \
                            send_mes–∞['id'] if send_mes–∞['id'] else send_mes–∞['link'], ''
                        send_mes–∞['lvl'] = send_mes–∞['lvl'] or ''
                        mes = ''.join(send_mes–∞.values())

                        user = send_mes–∞['id'] if send_mes–∞['id'] else send_mes–∞['link']

                        user = user.replace(
                            '@', '').replace('https://t.me/', '')

                        await self.save_last_infect(user)
                        self.db.set("BioWars", "infStatus", True)
                        await message.reply(f'–±–∏–æ–µ–± {mes}')
                        self.db.set("BioWars", "infStatus", False)
                        return

                    await self.z_command(message, args_raw, text, reply)
                    return

                elif re.search(r"–≤–∞–∫[—Ü–∏–Ω–∞—É]{,3}|–ª–µ—á[–∏—Å—å]{,2}|—Ö–∏[–ª–ª—å—Å—è–π–∏–Ω–≥]{,2}|–ª–µ–∫[–∞—Ä—Å—Ç–≤–æ]{,2}", text_low, flags=re.ASCII):
                    await message.reply('—Ö–∏–ª')
                    return

                elif re.fullmatch(r"–ª–∞–±[–∞—É]{,2}", text, flags=re.ASCII):  # —Ä–µ–≥—É–ª—è—Ä–∫–∞
                    lab_raw = await self.message_q(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É–∏       –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç
                        f"–±–∏–æ–ª–∞–±",
                        5443619563,
                        mark_read=True,
                        delete=True,
                    )
                    if lab_raw == 'Timeout':
                        await message.respond('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∏—Ä–∏—Å–∞ –∏—Å—Ç–µ–∫–ª–æ')
                        return

                    lab_lines = lab_raw.splitlines()  # —Ç–µ–∫—Å—Ç —Å –ª–∞–±–æ–π, —Ä–∞–∑–±–∏—Ç—ã–π     –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                    if "ü¶† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ä—É—Å–µ" not in lab_lines[0]:
                        return
                    sms = ""
                    for i in lab_lines:  # —Ü–∏–∫–ª for –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –≤ —Ç–µ–∫—Å—Ç–µ –ª–∞–±—ã
                        if "üß™ –ü–∞—Ç–æ–≥–µ–Ω–æ–≤:" in i:
                            sms += f"{i}\n"
                        if "‚è± –ù–æ–≤—ã–π –ø–∞—Ç–æ–≥–µ–Ω:" in i:
                            sms += f"{i}\n"
                        if "‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç:" in i:
                            sms += f"{i}\n"
                        if "üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å:" in i:
                            sms += f"{i}\n"
                        if "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω–æ–π  –±–æ–ª–µ–∑–Ω—å—é" in i:
                            s = i.replace(
                                "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏,     –≤—ã–∑–≤–∞–Ω–Ω–æ–π –±–æ–ª–µ–∑–Ω—å—é ", "")
                            sms += f"{s}\n"
                        if "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏ –µ—â—ë" in i:
                            s = i.replace(
                                "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏ –µ—â—ë  ", "")
                            sms += f"{s}\n"
                    await message.reply(sms)  # –æ—Ç–≤–µ—Ç
                    return
                elif args_raw.lower() == '–∑–∑' or args_raw.lower() == '–±–∏–æ':
                    if not reply:
                        await utils.answer(message, self.strings('no.reply'))
                        return
                    await self.bio_command(message, reply, me)
                    return

                # –ù–µ –¥–æ–¥–µ–ª–∞–Ω–æ
                elif args_raw == '—Å–±':

                    if not reply:
                        await utils.answer(message, self.strings('no.reply'))
                        return

                    if re.search(r"üë®üèª‚Äçüî¨ –ë—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞—Ä–∞–∂–µ–Ω–∏—è", reply.text):
                        entities = reply.get_entities_text()

                        infect = await self._handler_link(entities[1][0].url)
                        infect = infect.replace("@", "")

                        # except:
                        # infect = await self._handler_link(entities[0][0].url).replace("@","")

                        if not infect.isdigit():
                            username = infect
                            infect = await self.return_user(username)
                        if not infect:
                            return

                        if '@' + str(infect) in infList:
                            user = infList['@' + str(infect)]
                            infectBefore = self.db.get(
                                'BioWars', 'InfectionBefore')

                            zar_do = infectBefore['@' + str(
                                infect)] if infect in infectBefore.keys() else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                            niks = self.db.get('BioWars', 'UsersNik')
                            if str(infect) in niks.keys():
                                nik = niks[str(infect)]
                                usr = f'<a href="tg://openmessage?user_id={infect}">{nik}</a>'
                            else:
                                usr = f'<code>@{infect}</code>'

                            await message.reply(self.strings('zar.search').format(usr, user[0], user[1], zar_do))
                        else:
                            # await message.reply(f'{self.strings("z.nf").format('@' + str(infect)}'
                            await message.reply(self.strings('z.nf').format("@" + str(infect)))
                    return
                # —á–µ–∫ –∂–µ—Ä—Ç–≤ —Å –ø–æ–º–æ—â—å—é –¥–æ–≤–∞
                # –ü—Ä–∏–º–µ—Ä: –≤–∏—Ä –∑ @777000
            #    elif re.search(r"(?P<zarlist>–∑\s(?P<link>@[0-9a-z_]+|(?:https?# ://)?t\.me/[0-9a-z_]+|tg://openmessage\?user_id=(?P<id>[0-9]+))", # text, flags=re.ASCII):
                    # pass
            if level >= 2:
                # –ó–∞–ø–∏—Å—å –∂–µ—Ä—Ç–≤ —Å –ø–æ–º–æ—â—å—é –¥–æ–≤–∞
                # –ü—Ä–∏–º–µ—Ä: –≤–∏—Ä –∂–¥ @777000
                if re.search(r"–∂–¥\s@\d{3,12}.{,10}", text_low, flags=re.ASCII):
                    pass
                # –ß–µ–∫ –µ–∂–µ–¥–Ω–µ–≤–∫–∏

                elif re.fullmatch(r"–µ–∂[–∞—É]{,2}", text_low, flags=re.ASCII):
                    await message.reply('–±–∏–æ–µ–∂–∞')

                elif send_mesa := re.fullmatch(r"(—Ç–æ–ø –∂–µ—Ä—Ç–≤[—ã–∞—É]{,2} )(?P<list>[0-9]{,10})?", text_low, flags=re.ASCII) or re.fullmatch(r"(—Ç–æ–ø –∂–µ—Ä—Ç–≤[—ã–∞—É]{,2})", text_low, flags=re.ASCII):

                    try:
                        send_mesa = send_mesa.groupdict()
                        n = int(send_mesa['list'])
                    except:
                        n = 1

                    await self.get_top_zhertv(message=message, num_list=n)
                    return

                elif send_mesa := re.fullmatch(r"(–∂–µ—Ä—Ç–≤[—ã–∞—É]{,2} )(?P<list>[0-9]{,10})?", text_low, flags=re.ASCII) or re.fullmatch(r"(–∂–µ—Ä—Ç–≤[—ã–∞—É]{,2})", text_low, flags=re.ASCII):
                    try:
                        send_mesa = send_mesa.groupdict()
                        n = int(send_mesa['list'])
                    except:
                        n = 1

                    await self.get_zhertv(message=message, num_list=n)
                    return
            if level >= 3:
                # –ß–µ–∫ –±–æ–ª–µ–∑–Ω–µ–π
                if re.fullmatch(r"–±–æ–ª–µ–∑–Ω–∏|–±–æ–ª", text_low, flags=re.ASCII):
                    await message.reply('–±–∏–æ–±–æ–ª—å')

                # –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—à–∫–∞
                elif re.search(r'–±–∏–æ–º–µ—à–æ–∫', text_low):
                    await message.respond('–±–∏–æ–º–µ—à–æ–∫')

                if send_mes–∞ := re.search(r"–±–∏–æ–ª–∞–±[–∞—É]{,2}(?P<args>(\s(\w{1,12})){1,})", text_low, flags=re.ASCII):

                    send_mes–∞ = send_mes–∞.groupdict()
                    lab_args = send_mes–∞['args'].split()
                    lab_raw = await self.message_q(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç
                        f"–±–∏–æ–ª–∞–±",
                        5443619563,
                        mark_read=True,
                        delete=True,
                    )
                    if lab_raw == 'Timeout':
                        await message.respond('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∏—Ä–∏—Å–∞ –∏—Å—Ç–µ–∫–ª–æ')

                    lab_lines = lab_raw.splitlines()  # —Ç–µ–∫—Å—Ç —Å –ª–∞–±–æ–π, —Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                    if "ü¶† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ä—É—Å–µ" not in lab_lines[0]:
                        return
                    sms = ""

                    args = ['d', 's', 'c', 'n', 'p', 'q', 'np', 'inf', 'imm',
                            'm', 'ss', 'be', 'br', 'so', 'prev', 'i', 'dis', 'f']
                    for arg in lab_args:
                        if arg in args:
                            for i in lab_lines:  # —Ü–∏–∫–ª for –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –≤ —Ç–µ–∫—Å—Ç–µ –ª–∞–±—ã
                                if "ü¶† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ä—É—Å–µ" in i and arg == 'd':
                                    sms += f"{i}\n"
                                if "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" in i and arg == 's':
                                    sms += f"{i}\n"
                                if "–í —Å–æ—Å—Ç–∞–≤–µ –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏" in i and arg == 'c':
                                    sms += f"{i}\n"

                                if "üè∑ –ò–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞:" in i and arg == 'n':
                                    sms += f"{i}\n"
                                if "üß™ –ü–∞—Ç–æ–≥–µ–Ω–æ–≤:" in i and arg == 'p':
                                    sms += f"{i}\n"
                                if "üë®üèª‚Äçüî¨ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:" in i and arg == 'np':
                                    sms += f"{i}\n"

                                if "ü¶† –ó–∞—Ä–∞–∑–Ω–æ—Å—Ç—å:" in i and arg == 'inf':
                                    sms += f"{i}\n"
                                if "üõ° –ò–º–º—É–Ω–∏—Ç–µ—Ç:" in i and arg == 'imm':
                                    sms += f"{i}\n"
                                if "‚ò†Ô∏è –õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å:" in i and arg == 'm':
                                    sms += f"{i}\n"
                                if "üïµÔ∏è‚Äç‚ôÇÔ∏è –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:" in i and arg == 'ss':
                                    sms += f"{i}\n"

                                if "‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç:" in i and arg == 'be':
                                    sms += f"{i}\n"
                                if "üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å:" in i and arg == 'br':
                                    sms += f"{i}\n"

                                if "üò∑ –°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–π:" in i and arg == 'so':
                                    sms += f"{i}\n"
                                if "ü•Ω –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã:" in i and arg == 'prev':
                                    sms += f"{i}\n"
                                if "ü§í –ó–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö:" in i and arg == 'i':
                                    sms += f"{i}\n"
                                if "ü§í –°–≤–æ–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π:" in i and arg == 'dis':
                                    sms += f"{i}\n"

                                if "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω–æ–π –±–æ–ª–µ–∑–Ω—å—é" in i and arg == 'f':
                                    s = i.replace(
                                        "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω–æ–π –±–æ–ª–µ–∑–Ω—å—é                  ", "")
                                    sms += f"ü§í –ì–æ—Ä—è—á–∫–∞ –æ—Ç {s}\n"
                                if "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏ –µ—â—ë" in i and arg == 'f':
                                    s = i.replace(
                                        "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏ –µ—â—ë ", "")
                                    sms += f"ü§í –ì–æ—Ä—è—á–∫–∞ –Ω–∞ {s}\n"
                        else:
                            print(arg)
                            sms += f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: <code>{arg}</code> \n'
                    await message.reply(sms)
                    return

            if level == 4:
                # –ü—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤
                if send_mes := re.search(r"(?P<ch>–∑–∞—Ä–∞–∑[–∫—É–∞–Ω–æ—Å—Ç—å]{,5} —á–µ–∫[–Ω—É—Ç—å–∏–∞–π]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∑–∞—Ä–∞–∑[–∫—É–∞–Ω–æ—Å—Ç—å]{,5}\s)(?P<lvl>[0-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['ch'] = '+–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)

                elif send_mes := re.search(r"(?P<pat>–ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5}\s)(?P<lvl>[0-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['pat'] = '+–ø–∞—Ç–æ–≥–µ–Ω '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<let>–ª–µ—Ç–∞–ª[–∫–∞—å–Ω–æ—Å—Ç—å—É]{,5} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –ª–µ—Ç–∞–ª[–∫–∞—å–Ω–æ—Å—Ç—å—É]{,5}\s)(?P<lvl>[1-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['let'] = '+–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<kvala>–∫–≤–∞–ª[–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è—É]{,8} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} —Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∫–≤–∞–ª[—É–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è]{,8}\s)(?P<lvl>[0-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['kvala'] = '+–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<imun>—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∏–º–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∏–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4}\s|–∏–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|–∏–º–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s)(?P<lvl>[0-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['imun'] = '+–∏–º–º—É–Ω–∏—Ç–µ—Ç '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<sb>—Å–± —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|–±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—Å–ª—É–∂–±[–∞—É]{,2} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} —Å–ª—É–∂–±[–∞—É]{,2}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} —Å–±\s)(?P<lvl>[0-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['sb'] = '+–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
# –∫–∞—á    –∞–ª–∫–∏
                elif send_mes := re.search(r"(?P<zar>–∑–∞—Ä–∞–∑[—É–∫–∞–Ω–æ—Å—Ç—å]{,5}\s)(?P<lvl>[0-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['zar'] = '++–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<pat>–ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5}\s)(?P<lvl>[0-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['pat'] = '++–ø–∞—Ç–æ–≥–µ–Ω '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<let>–ª–µ—Ç–∞–ª[—É–∫–∞—å–Ω–æ—Å—Ç—å]{,5}\s)(?P<lvl>[1-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['let'] = '++–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<kvala>–∫–≤–∞–ª[—É–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è]{,8}\s|—Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4}\s)(?P<lvl>[0-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['kvala'] = '++–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<imun>–∏–º–º—É–Ω[—É–µ–∏—Ç–µ—Ç–∫–∞]{,4}|–∏–º—É–Ω[—É–µ–∏—Ç–µ—Ç–∫–∞]{,4}\s)(?P<lvl>[0-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['imun'] = '++–∏–º–º—É–Ω–∏—Ç–µ—Ç '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<sb>—Å–±\s|–±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3}\s|—Å–ª—É–∂–±[–∞—É]{,2}\s)(?P<lvl>[0-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['sb'] = '++–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)

            # —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏—Ä—É—Å–∞–º–∏
                elif re.search(r'\+–≤–∏—Ä—É—Å[–∞—ã]{,2}|—É–≤–µ–¥[—ã–æ–º–ª–µ–Ω–∏—è]', text_low):
                    await message.reply('+–≤–∏—Ä—É—Å—ã')

                elif re.search(r'-–≤–∏—Ä—É—Å[–∞—ã]{,2}', text_low):
                    await message.reply('-–≤–∏—Ä—É—Å—ã')

                # –°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –ª–∞–±—ã –∏ –ø–∞—Ç–∞

                elif send_mesa := re.search(r'\+–ø–∞—Ç[–æ–≥–µ–Ω]{,4}(?P<pat>(\s(\w{1,12})){1,})', text_norm):

                    send_mesa = send_mesa.groupdict()
                    pat = ' '.join(send_mesa['pat'].split())

                    await message.reply(f'+–≤–∏—Ä—É—Å {pat}')
                    return

                elif send_mesa := re.search(r'\+–±–∏–æ–ª–∞–±[a]{,1}(?P<lab>(\s(\w{1,12})){1,})', text_norm):

                    send_mesa = send_mesa.groupdict()
                    pat = ' '.join(send_mesa['lab'].split())

                    await message.reply(f'+–∏–º—è –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ {pat}')
                    return

                elif send_mesa := re.search(r'-–ø–∞—Ç[–æ–≥–µ–Ω]{,4}', text_low):
                    await message.reply(f'-–≤–∏—Ä—É—Å')
                    return

                elif send_mesa := re.search(r'-–ª–∞–±[a]{,1}', text_low):
                    await message.reply(f'-–ò–º—è –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏')
                    return

            # –ß–µ–∫ —Ñ—É–ª–ª –ª–∞–±—ã
                if re.fullmatch(r'–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', text):
                    await message.respond('–±–∏–æ–ª–∞–±')
###################
